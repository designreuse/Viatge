package br.com.joocebox.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.DiscriminatorType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

import org.eclipse.persistence.annotations.Multitenant;
import org.eclipse.persistence.annotations.TenantDiscriminatorColumn;
import org.eclipse.persistence.config.PersistenceUnitProperties;
import org.hibernate.validator.constraints.NotEmpty;
import org.springframework.format.annotation.DateTimeFormat;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import com.google.common.hash.Hashing;

@Entity
@Table(name="staff")
@Multitenant
@TenantDiscriminatorColumn(name="tenant_id", discriminatorType=DiscriminatorType.INTEGER, contextProperty=PersistenceUnitProperties.MULTITENANT_PROPERTY_DEFAULT)
public class Staff implements Serializable{

	private static final long serialVersionUID = 1L;
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@Column(name = "tenant_id", insertable = false, updatable = false)
	private Long tenantId;
	
	@NotNull
	@NotEmpty(message="O Nome n達o pode estar em branco.")
	@Column(name="first_name")
	private String firstName;
	
	@NotNull
	@NotEmpty(message="O Sobrenome n達o pode estar em branco.")
	@Column(name="last_name")
	private String lastName;
	
	@OneToOne(cascade=CascadeType.PERSIST)
	@JoinColumn(name = "fk_staffContact")
	@Valid
	private StaffContact contact;
	
	@Column(name = "birth_date")
	@DateTimeFormat(pattern = "dd/MM/yyyy")
	@Temporal(TemporalType.DATE)
	@NotNull(message="A data de nascimento n達o pode estar em branco.")
	private Date birthDate;
	
	@Column(name="gernder")
	@NotNull
	@Pattern(regexp = "^[M|F]{1}$", message ="Selecione o sexo do colaborador.")
	private String gender;
	
	@OneToOne(cascade = CascadeType.PERSIST)
	@JoinColumn(name = "fk_professionalData")
	@Valid
	private ProfessionalData professionalData;
	
	@OneToOne(cascade = CascadeType.PERSIST)
	@JoinColumn(name = "fk_goal")
	private Goals goal;
	
	@Column(name="active")
	private Boolean active;

	public Staff() {

	}

	public Staff(String firstName, String lastName, String email,
			StaffContact contact, Date birthDate, String gender,
			ProfessionalData professionalData, Goals goal, Boolean active) {
		this.firstName = firstName;
		this.lastName = lastName;
		this.contact = contact;
		this.birthDate = birthDate;
		this.gender = gender;
		this.professionalData = professionalData;
		this.goal = goal;
		this.active = active;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public StaffContact getContact() {
		return contact;
	}

	public void setContact(StaffContact contact) {
		this.contact = contact;
	}

	public Date getBirthDate() {
		return birthDate;
	}

	public void setBirthDate(Date birthDate) {
		this.birthDate = birthDate;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public ProfessionalData getProfessionalData() {
		return professionalData;
	}

	public void setProfessionalData(ProfessionalData professionalData) {
		this.professionalData = professionalData;
	}

	public Goals getGoal() {
		return goal;
	}

	public void setGoal(Goals goal) {
		this.goal = goal;
	}

	public Boolean getActive() {
		return active;
	}

	public void setActive(Boolean active) {
		this.active = active;
	}

	public Long getId() {
		return id;
	}

	public Long getTenantId() {
		return tenantId;
	}

	@Override
	public int hashCode() {
		return Hashing.sha1().hashCode();
	}

	@Override
	public boolean equals(Object obj) {
	       if (obj == null) return false;
	        if (getClass() != obj.getClass()) return false;
	        final Staff other = (Staff) obj;
	        return Objects.equal(this.birthDate, other.birthDate)
	            && Objects.equal(this.firstName, other.firstName)
	            && Objects.equal(this.lastName, other.lastName)
	            && Objects.equal(this.gender, other.gender)
	            && Objects.equal(this.contact, other.contact)
	            && Objects.equal(this.goal, other.goal)
	            && Objects.equal(this.professionalData, other.professionalData);
	}

	@Override
	public String toString() {
		return MoreObjects.toStringHelper(Staff.class)
				.add("Nome do Funcionario", getFirstName())
				.add("Sobrenome", getLastName())
				.add("Ativo", this.active.equals(Boolean.true) ? "Sim" : "N達o") .toString();
	}

}
